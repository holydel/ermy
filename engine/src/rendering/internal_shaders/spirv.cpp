#include <ermy_shader_internal.h>
#ifdef ERMY_GAPI_VULKAN
namespace ermy::shader_internal{
	ShaderBytecode computeMain()
	{
		static u8 data[] = {3,2,35,7,0,5,1,0,40,0,0,0,31,0,0,0,0,0,0,0,17,0,2,0,1,0,0,0,10,0,11,0,83,80,86,95,75,72,82,95,115,116,111,114,97,103,101,95,98,117,102,102,101,114,95,115,116,111,114,97,103,101,95,99,108,97,115,115,0,0,0,0,14,0,3,0,0,0,0,0,1,0,0,0,15,0,9,0,5,0,0,0,2,0,0,0,109,97,105,110,0,0,0,0,19,0,0,0,23,0,0,0,26,0,0,0,9,0,0,0,16,0,6,0,2,0,0,0,
17,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,3,0,3,0,11,0,0,0,1,0,0,0,5,0,4,0,10,0,0,0,105,110,100,101,120,0,0,0,5,0,7,0,16,0,0,0,82,87,83,116,114,117,99,116,117,114,101,100,66,117,102,102,101,114,0,0,5,0,4,0,19,0,0,0,114,101,115,117,108,116,0,0,5,0,7,0,21,0,0,0,83,116,114,117,99,116,117,114,101,100,66,117,102,102,101,114,0,0,0,0,5,0,4,0,23,0,0,0,98,117,102,102,
101,114,48,0,5,0,4,0,26,0,0,0,98,117,102,102,101,114,49,0,5,0,5,0,2,0,0,0,99,111,109,112,117,116,101,77,97,105,110,0,71,0,4,0,9,0,0,0,11,0,0,0,28,0,0,0,71,0,4,0,17,0,0,0,6,0,0,0,4,0,0,0,71,0,3,0,16,0,0,0,2,0,0,0,72,0,5,0,16,0,0,0,0,0,0,0,35,0,0,0,0,0,0,0,71,0,4,0,19,0,0,0,33,0,0,0,2,0,0,0,71,0,4,0,19,0,0,0,
34,0,0,0,0,0,0,0,71,0,3,0,21,0,0,0,2,0,0,0,72,0,5,0,21,0,0,0,0,0,0,0,35,0,0,0,0,0,0,0,71,0,4,0,23,0,0,0,33,0,0,0,0,0,0,0,71,0,4,0,23,0,0,0,34,0,0,0,0,0,0,0,71,0,3,0,23,0,0,0,24,0,0,0,71,0,4,0,26,0,0,0,33,0,0,0,1,0,0,0,71,0,4,0,26,0,0,0,34,0,0,0,0,0,0,0,71,0,3,0,26,0,0,0,24,0,0,0,
19,0,2,0,1,0,0,0,33,0,3,0,3,0,0,0,1,0,0,0,21,0,4,0,5,0,0,0,32,0,0,0,0,0,0,0,23,0,4,0,6,0,0,0,5,0,0,0,3,0,0,0,32,0,4,0,8,0,0,0,1,0,0,0,6,0,0,0,21,0,4,0,11,0,0,0,32,0,0,0,1,0,0,0,43,0,4,0,11,0,0,0,12,0,0,0,0,0,0,0,22,0,3,0,13,0,0,0,32,0,0,0,32,0,4,0,14,0,0,0,12,0,0,0,13,0,0,0,
29,0,3,0,17,0,0,0,13,0,0,0,30,0,3,0,16,0,0,0,17,0,0,0,32,0,4,0,18,0,0,0,12,0,0,0,16,0,0,0,30,0,3,0,21,0,0,0,17,0,0,0,32,0,4,0,22,0,0,0,12,0,0,0,21,0,0,0,59,0,4,0,8,0,0,0,9,0,0,0,1,0,0,0,59,0,4,0,18,0,0,0,19,0,0,0,12,0,0,0,59,0,4,0,22,0,0,0,23,0,0,0,12,0,0,0,59,0,4,0,22,0,0,0,26,0,0,0,
12,0,0,0,54,0,5,0,1,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,248,0,2,0,4,0,0,0,61,0,4,0,6,0,0,0,7,0,0,0,9,0,0,0,81,0,5,0,5,0,0,0,10,0,0,0,7,0,0,0,0,0,0,0,65,0,6,0,14,0,0,0,15,0,0,0,19,0,0,0,12,0,0,0,10,0,0,0,65,0,6,0,14,0,0,0,20,0,0,0,23,0,0,0,12,0,0,0,10,0,0,0,61,0,4,0,13,0,0,0,24,0,0,0,
20,0,0,0,65,0,6,0,14,0,0,0,25,0,0,0,26,0,0,0,12,0,0,0,10,0,0,0,61,0,4,0,13,0,0,0,27,0,0,0,25,0,0,0,129,0,5,0,13,0,0,0,28,0,0,0,24,0,0,0,27,0,0,0,62,0,3,0,15,0,0,0,28,0,0,0,253,0,1,0,56,0,1,0};

		ShaderBytecode result;
		result.data = data;
		result.size = sizeof(data);
		result.isInternal = true;
		result.stage = ShaderStage::Compute;

		return result;
	}

	ShaderBytecode testTriangleVS()
	{
		static u8 data[] = {3,2,35,7,0,5,1,0,40,0,0,0,61,0,0,0,0,0,0,0,17,0,2,0,1,0,0,0,14,0,3,0,0,0,0,0,1,0,0,0,15,0,8,0,0,0,0,0,2,0,0,0,109,97,105,110,0,0,0,0,56,0,0,0,60,0,0,0,22,0,0,0,3,0,3,0,11,0,0,0,1,0,0,0,5,0,12,0,60,0,0,0,101,110,116,114,121,80,111,105,110,116,80,97,114,97,109,95,116,101,115,116,84,114,105,97,110,103,108,101,86,83,46,99,111,108,111,114,
0,0,0,0,5,0,6,0,2,0,0,0,116,101,115,116,84,114,105,97,110,103,108,101,86,83,0,0,71,0,4,0,11,0,0,0,6,0,0,0,8,0,0,0,71,0,4,0,17,0,0,0,6,0,0,0,12,0,0,0,71,0,4,0,22,0,0,0,11,0,0,0,42,0,0,0,71,0,4,0,56,0,0,0,11,0,0,0,0,0,0,0,71,0,4,0,60,0,0,0,30,0,0,0,0,0,0,0,19,0,2,0,1,0,0,0,33,0,3,0,3,0,0,0,1,0,0,0,
22,0,3,0,6,0,0,0,32,0,0,0,23,0,4,0,7,0,0,0,6,0,0,0,4,0,0,0,23,0,4,0,8,0,0,0,6,0,0,0,3,0,0,0,23,0,4,0,12,0,0,0,6,0,0,0,2,0,0,0,21,0,4,0,13,0,0,0,32,0,0,0,1,0,0,0,43,0,4,0,13,0,0,0,14,0,0,0,3,0,0,0,28,0,4,0,11,0,0,0,12,0,0,0,14,0,0,0,32,0,4,0,15,0,0,0,7,0,0,0,11,0,0,0,28,0,4,0,
17,0,0,0,8,0,0,0,14,0,0,0,32,0,4,0,18,0,0,0,7,0,0,0,17,0,0,0,32,0,4,0,21,0,0,0,1,0,0,0,13,0,0,0,21,0,4,0,23,0,0,0,32,0,0,0,0,0,0,0,43,0,4,0,6,0,0,0,30,0,0,0,0,0,0,0,43,0,4,0,6,0,0,0,31,0,0,0,0,0,0,63,44,0,5,0,12,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,43,0,4,0,6,0,0,0,33,0,0,0,0,0,0,191,
44,0,5,0,12,0,0,0,32,0,0,0,31,0,0,0,33,0,0,0,44,0,5,0,12,0,0,0,34,0,0,0,33,0,0,0,33,0,0,0,44,0,6,0,11,0,0,0,28,0,0,0,29,0,0,0,32,0,0,0,34,0,0,0,32,0,4,0,36,0,0,0,7,0,0,0,12,0,0,0,43,0,4,0,6,0,0,0,40,0,0,0,0,0,128,63,32,0,4,0,43,0,0,0,7,0,0,0,8,0,0,0,44,0,6,0,8,0,0,0,46,0,0,0,40,0,0,0,
30,0,0,0,30,0,0,0,44,0,6,0,8,0,0,0,47,0,0,0,30,0,0,0,40,0,0,0,30,0,0,0,44,0,6,0,8,0,0,0,48,0,0,0,30,0,0,0,30,0,0,0,40,0,0,0,44,0,6,0,17,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,32,0,4,0,55,0,0,0,3,0,0,0,7,0,0,0,32,0,4,0,59,0,0,0,3,0,0,0,8,0,0,0,59,0,4,0,21,0,0,0,22,0,0,0,1,0,0,0,
59,0,4,0,55,0,0,0,56,0,0,0,3,0,0,0,59,0,4,0,59,0,0,0,60,0,0,0,3,0,0,0,54,0,5,0,1,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,248,0,2,0,4,0,0,0,59,0,4,0,15,0,0,0,16,0,0,0,7,0,0,0,59,0,4,0,18,0,0,0,19,0,0,0,7,0,0,0,61,0,4,0,13,0,0,0,20,0,0,0,22,0,0,0,124,0,4,0,23,0,0,0,24,0,0,0,20,0,0,0,62,0,3,0,
16,0,0,0,28,0,0,0,65,0,5,0,36,0,0,0,37,0,0,0,16,0,0,0,24,0,0,0,61,0,4,0,12,0,0,0,38,0,0,0,37,0,0,0,80,0,6,0,7,0,0,0,39,0,0,0,38,0,0,0,30,0,0,0,40,0,0,0,62,0,3,0,19,0,0,0,45,0,0,0,65,0,5,0,43,0,0,0,50,0,0,0,19,0,0,0,24,0,0,0,61,0,4,0,8,0,0,0,51,0,0,0,50,0,0,0,62,0,3,0,56,0,0,0,39,0,0,0,
62,0,3,0,60,0,0,0,51,0,0,0,253,0,1,0,56,0,1,0};

		ShaderBytecode result;
		result.data = data;
		result.size = sizeof(data);
		result.isInternal = true;
		result.stage = ShaderStage::Vertex;

		return result;
	}

	ShaderBytecode testTriangleFS()
	{
		static u8 data[] = {3,2,35,7,0,5,1,0,40,0,0,0,17,0,0,0,0,0,0,0,17,0,2,0,1,0,0,0,14,0,3,0,0,0,0,0,1,0,0,0,15,0,7,0,4,0,0,0,2,0,0,0,109,97,105,110,0,0,0,0,14,0,0,0,9,0,0,0,16,0,3,0,2,0,0,0,7,0,0,0,3,0,3,0,11,0,0,0,1,0,0,0,5,0,5,0,9,0,0,0,105,110,112,117,116,46,99,111,108,111,114,0,5,0,10,0,14,0,0,0,101,110,116,114,121,80,111,105,
110,116,80,97,114,97,109,95,116,101,115,116,84,114,105,97,110,103,108,101,70,83,0,0,5,0,6,0,2,0,0,0,116,101,115,116,84,114,105,97,110,103,108,101,70,83,0,0,71,0,4,0,9,0,0,0,30,0,0,0,0,0,0,0,71,0,4,0,14,0,0,0,30,0,0,0,0,0,0,0,19,0,2,0,1,0,0,0,33,0,3,0,3,0,0,0,1,0,0,0,22,0,3,0,5,0,0,0,32,0,0,0,23,0,4,0,6,0,0,0,5,0,0,0,3,0,0,0,
32,0,4,0,8,0,0,0,1,0,0,0,6,0,0,0,23,0,4,0,10,0,0,0,5,0,0,0,4,0,0,0,43,0,4,0,5,0,0,0,12,0,0,0,0,0,128,63,32,0,4,0,13,0,0,0,3,0,0,0,10,0,0,0,59,0,4,0,8,0,0,0,9,0,0,0,1,0,0,0,59,0,4,0,13,0,0,0,14,0,0,0,3,0,0,0,54,0,5,0,1,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,248,0,2,0,4,0,0,0,61,0,4,0,
6,0,0,0,7,0,0,0,9,0,0,0,80,0,5,0,10,0,0,0,11,0,0,0,7,0,0,0,12,0,0,0,62,0,3,0,14,0,0,0,11,0,0,0,253,0,1,0,56,0,1,0};

		ShaderBytecode result;
		result.data = data;
		result.size = sizeof(data);
		result.isInternal = true;
		result.stage = ShaderStage::Fragment;

		return result;
	}

}
#endif
